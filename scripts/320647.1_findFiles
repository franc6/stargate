#!/bin/sh
#set -x
# moved to git...
#<name> disa-findFiles
#<desc> Shared Script for Finding Files
#<type> Sensor
#<sci>  DISA Unix Script - findFiles
#<owner> Copyright (C) 2008 BladeLogic, Inc.
#######################################################################
#<doc> NAME
#<doc>         findFiles
#<doc>
#<doc> SYNTAX
#<doc>          disa-findFiles <OS=osname> <FORCEFIND=<y/n>
#<doc>		Ex. disa-findFiles OS=Solaris FORCEFIND=n
#<doc>
#<doc> DESCRIPTION
#<doc> findFiles
#<doc> If Force Find = n, results from the last 24 hours will be used
#<doc>
#<doc>


i_SIGINT=2
i_SIGTERM=15
i_SIGKILL=9



usage()
{
	echo "Usage:	$0 [ $str_CMD_LN_PM_FORCE_FIND ] [ $str_CMD_LN_PM_MAX_DISK_PERCENTAGE percentage ] [ $str_CMD_LN_PM_CACHE_HOURS hours ]"
	echo "			[ $str_CMD_LN_PM_PRUNE directory-path ] [ $str_CMD_LN_PM_RSCD_DIRECTORY directory-path ]"
	echo "			[ $str_CMD_LN_PM_SCAN_DIRECTORY directory-path ] [ $str_CMD_LN_PM_FIND_TIMEOUT timeout ]"
	echo "			[ $str_CMD_LN_PM_MAX_PROCESS_COUNT max-proces-count ] [ $str_CMD_LN_PM_HELP ]"
	echo
	echo "		$str_CMD_LN_PM_FORCE_FIND: forces updating of cache, regardless of time since last updation."
	echo "			The default is not to update cache unless $i_CATCHE_HOURS hours have elapsed since last updation of cache."
	echo "		$str_CMD_LN_PM_MAX_DISK_PERCENTAGE percentage: prevents find files from using more than 'percentage'% of disk space."
	echo "			The default value is $i_MAX_DISK_PERCENTAGE%."
	echo "		$str_CMD_LN_PM_CACHE_HOURS hours: 'hours' is the number of hours for which find files will continue to use the existing cache."
	echo "			The default value is $i_CATCHE_HOURS hours."
	echo "		$str_CMD_LN_PM_PRUNE directory-path: 'directory-path' will not be searched as part of global seach for non compliant files."
	echo "			For Aix and Solaris only a directory in the root level can be specified."
	echo "			Providing this parameter multiple times will make each such 'directory-path'"
	echo "			to be excluded from path used for find files search."
	echo "		$str_CMD_LN_PM_RSCD_DIRECTORY directory-path: 'directory-path' species the location of RSCD directory."
	echo "			This will be excluded from global search for non compliant files."
	echo "		$str_CMD_LN_PM_SCAN_DIRECTORY directory-path: 'directory-path' will be used as starting"
	echo "			point for global search for non compliant files instead of /."
	echo "			Providing this parameter multiple times will make each such 'directory-path'"
	echo "			to be included in path used for find files search."
	echo "		$str_CMD_LN_PM_FIND_TIMEOUT timeout: Time out in minutes value for find files."
	echo "			The default timeout is 0, which means find files will continue its execution"
	echo "			as long as it has to."
	echo "      $str_CMD_LN_PM_MAX_PROCESS_COUNT max-proces-count: Maximum number of parallel process that"
	echo "          will be executing at any given time."
	echo "		$str_CMD_LN_PM_HELP: displays this help."
	echo
	echo
}

print_error_for_invalid_parameter_and_exit()
{
	echo "$1" 1>&2
	echo
	usage
	exit 1
}

print_error_that_parameter_argument_has_to_be_integer_and_exit()
{
	print_error_for_invalid_parameter_and_exit "Invalid parameter sent to '$1' option. Parameter must be an integer."
}

is_integer()
{
	if [ -z "$1" -o `echo "$1" | egrep -c '[^0-9]'` -ne 0 ]
	then
		return 1
	fi

	return 0
}

capitalise_word()
{
	awk '{ for ( i=1; i <= NF; i++) { sub(".", substr(toupper($i),1,1), $i) }  print }'
}

parse_parameters()
{
	while [ $# -gt 0 ]
	do
		case "$1" in
			$str_CMD_LN_PM_FORCE_FIND)
				b_FORCE_FIND=1
				;;
			$str_CMD_LN_PM_MAX_DISK_PERCENTAGE)
				if is_integer "$2"
				then
					i_MAX_DISK_PERCENTAGE="$2"
				else
					print_error_that_parameter_argument_has_to_be_integer_and_exit "$1"
				fi
				shift
				;;
			$str_CMD_LN_PM_CACHE_HOURS)
				if is_integer "$2"
				then
					i_CATCHE_HOURS="$2"
				else
					print_error_that_parameter_argument_has_to_be_integer_and_exit "$1"
				fi
				shift
				;;
			$str_CMD_LN_PM_MAX_PROCESS_COUNT)
				if is_integer "$2"
				then
					i_BACKGROUND_PROCESS_MAX_COUNT="$2"
				else
					print_error_that_parameter_argument_has_to_be_integer_and_exit "$1"
				fi
				shift
				;;
			$str_CMD_LN_PM_PRUNE|$str_CMD_LN_PM_RSCD_DIRECTORY)
				if [ -n "$2" -a -d "$2" ]
				then
					i_DIRECTORIES_TO_BE_PRUNED_COUNT=`expr $i_DIRECTORIES_TO_BE_PRUNED_COUNT + 1`
					eval str_DIRECTORY_TO_BE_PRUNED_$i_DIRECTORIES_TO_BE_PRUNED_COUNT="$2"
				fi
				shift
				;;
			$str_CMD_LN_PM_SCAN_DIRECTORY)
				if [ -n "$2" -a -d "$2" ]
				then
					i_DIRECTORIES_TO_BE_SCANNED_COUNT=`expr $i_DIRECTORIES_TO_BE_SCANNED_COUNT + 1`
					eval str_DIRECTORY_TO_BE_SCANNED_$i_DIRECTORIES_TO_BE_SCANNED_COUNT="$2"
				fi
				shift
				;;
			$str_CMD_LN_PM_FIND_TIMEOUT)
				if is_integer "$2"
				then
					i_FINDFILE_TIMEOUT="$2"
				else
					print_error_that_parameter_argument_has_to_be_integer_and_exit "$1"
				fi
				shift
				;;
			$str_CMD_LN_PM_HELP)
				usage
				exit 0
				;;
		esac
		shift
	done
}

append_pid_into_list_of_background_processes()
{
	if [ -n "$str_BACKGROUND_PROCESS_PIDS" ]
	then
		str_BACKGROUND_PROCESS_PIDS="$str_BACKGROUND_PROCESS_PIDS $1"
		i_BACKGROUND_PROCESS_COUNT=`expr $i_BACKGROUND_PROCESS_COUNT + 1`
		if [ $i_BACKGROUND_PROCESS_MAX_COUNT -ne 0 ]
		then
			if [ $i_BACKGROUND_PROCESS_COUNT -eq $i_BACKGROUND_PROCESS_MAX_COUNT ]
			then
				wait_for_find_processes_to_exit `expr $i_BACKGROUND_PROCESS_MAX_COUNT - 1`
				i_BACKGROUND_PROCESS_COUNT=`expr $i_BACKGROUND_PROCESS_COUNT - 1`
			fi
		fi
	else
		str_BACKGROUND_PROCESS_PIDS="$1"
	fi
}

initialise()
{
	str_CMD_LN_PM_FORCE_FIND='-forcefind'
	str_CMD_LN_PM_MAX_DISK_PERCENTAGE='-maxdiskpercentage'
	str_CMD_LN_PM_CACHE_HOURS='-cachehours'
	str_CMD_LN_PM_PRUNE='-prune'
	str_CMD_LN_PM_RSCD_DIRECTORY='-rscddirectory'
	str_CMD_LN_PM_SCAN_DIRECTORY='-scandirectory'
	str_CMD_LN_PM_FIND_TIMEOUT='-findtimeout'
	str_CMD_LN_PM_MAX_PROCESS_COUNT='-maxprocesscount'
	str_CMD_LN_PM_HELP='-h|-help'

	OS_TYPE_LINUX="Linux"
	OS_TYPE_AIX="AIX"
	OS_TYPE_HPUX="HP-UX"
	OS_TYPE_SUNOS="SunOS"

	OS=`uname`

	if [ "$OS" = "$OS_TYPE_SUNOS" ]
	then
		PATH="/usr/xpg4/bin:$PATH"
	fi

	LANG="POSIX" ; export LANG
	LC_ALL="POSIX" ; export LC_ALL
	str_STAGING_DIRECTORY=`dirname $0`

	i_PID=$$
	str_TIMESTAMP=`date +"%y%m%d%H%M%S"`
	str_FIND_ERRORS_PATH="$str_STAGING_DIRECTORY/find_errors"
	str_FIND_FILES_CACHE_PATH="$str_STAGING_DIRECTORY/find_files_cache"
	str_FIND_FILES_CACHE_UNUSABLE_PATH="$str_STAGING_DIRECTORY/find_files_cache_unusable"
	str_ALRM_SCRIPT_PATH="${str_STAGING_DIRECTORY}/find_alrm_script_${i_PID}_${str_TIMESTAMP}"
	str_DISK_SPACE_CHECK_SCRIPT_PATH="${str_STAGING_DIRECTORY}/find_disk_space_check_script_${i_PID}_${str_TIMESTAMP}"

	b_FORCE_FIND=0
	i_MAX_DISK_PERCENTAGE=80
	i_CATCHE_HOURS=24
	i_DIRECTORIES_TO_BE_SCANNED_COUNT=0
	i_DIRECTORIES_TO_BE_PRUNED_COUNT=0
	i_DIRECTORIES_TO_BE_EXCLUDED_COUNT=0
	i_FINDFILE_TIMEOUT=0
	i_BACKGROUND_PROCESS_MAX_COUNT=30

	str_USER_DIRECTORY_LIST_PATH="$str_STAGING_DIRECTORY/user_directories_list"
	str_SCAN_DIRECTORY_LIST_PATH="$str_STAGING_DIRECTORY/scan_directories_list"

	if [ "$OS" = "SunOS" ]
	then
		AWK=nawk
	else
		AWK=awk
	fi

	str_FINDOPT_TYPE_F='( -type f )'
	str_FINDOPT_TYPE_D='( -type d )'

	str_FINDOPT_PERM_OR='-perm -0400'
	str_FINDOPT_PERM_OW='-perm -0200'
	str_FINDOPT_PERM_OX='-perm -0100'
	str_FINDOPT_PERM_GR='-perm -0040'
	str_FINDOPT_PERM_GW='-perm -0020'
	str_FINDOPT_PERM_GX='-perm -0010'
	str_FINDOPT_PERM_WR='-perm -0004'
	str_FINDOPT_PERM_WW='-perm -0002'
	str_FINDOPT_PERM_WX='-perm -0001'
	str_FINDOPT_PERM_SUID='-perm -4000'
	str_FINDOPT_PERM_SGID='-perm -2000'
	str_FINDOPT_PERM_STICKY='-perm -1000'

	str_REGEX_BEFORE_PERM_ALL_MATCH='^[0-9]+ [0-9]+ '
	str_REGEX_FOR_PERM_OR='.r........'
	str_REGEX_FOR_PERM_OW='..w.......'
	str_REGEX_FOR_PERM_OX='...[xs]......'
	str_REGEX_FOR_PERM_GR='....r.....'
	str_REGEX_FOR_PERM_GW='.....w....'
	str_REGEX_FOR_PERM_GX='......[xs]...'
	str_REGEX_FOR_PERM_WR='.......r..'
	str_REGEX_FOR_PERM_WW='........w.'
	str_REGEX_FOR_PERM_WX='.........[xt]'
	str_REGEX_FOR_PERM_SUID='...[sS]......'
	str_REGEX_FOR_PERM_SGID='......[sS]...'
	str_REGEX_FOR_PERM_STICKY='.........[tT]'
	str_REGEX_FOR_PERM_ANY='..........'

	case "$OS" in
		$OS_TYPE_AIX)	str_FINDOPT_PRUNE_REMOTE_FS='( -fstype nfs -prune )' ;;
		*)		str_FINDOPT_PRUNE_REMOTE_FS='( ( -fstype nfs -o -fstype autofs ) -prune )' ;;
	esac


	if [ "$OS" = "$OS_TYPE_LINUX" ]
	then
		str_FINDOPT_UID='-uid'
		str_FINDOPT_GID='-gid'
	else
		str_FINDOPT_UID='-user'
		str_FINDOPT_GID='-group'
	fi

	str_BACKGROUND_PROCESS_PIDS=''
	i_BACKGROUND_PROCESS_COUNT=0
}

do_we_need_to_update_cache()
{
	if [ $b_FORCE_FIND -ne 0 -o -f "$str_FIND_FILES_CACHE_UNUSABLE_PATH" -o ! -f "$str_FIND_FILES_CACHE_PATH" ]
	then
		return 0
	fi

	str_CREATION_YEAR=`ls -l $str_FIND_FILES_CACHE_PATH | tr -s ' ' | cut -d" " -f8 | $AWK '{if(! match($1,":")) print $1 }'`
	if [ ! -z "$str_CREATION_YEAR" ]
	then
		return 0
	fi

	str_CREATION_DATE_TIME=`ls -l "$str_FIND_FILES_CACHE_PATH" | tr -s ' ' | cut -d" " -f6,7,8`
	str_CREATION_MONTH=`echo $str_CREATION_DATE_TIME | cut -d" " -f1`
	case "$str_CREATION_MONTH" in
		Jan) i_CREATION_MONTH=1 ;;
		Feb) i_CREATION_MONTH=2 ;;
		Mar) i_CREATION_MONTH=3 ;;
		Apr) i_CREATION_MONTH=4 ;;
		May) i_CREATION_MONTH=5 ;;
		Jun) i_CREATION_MONTH=6 ;;
		Jul) i_CREATION_MONTH=7 ;;
		Aug) i_CREATION_MONTH=8 ;;
		Sep) i_CREATION_MONTH=9 ;;
		Oct) i_CREATION_MONTH=10 ;;
		Nov) i_CREATION_MONTH=11 ;;
		Dec) i_CREATION_MONTH=12 ;;
	esac

	i_CREATION_DAY=`echo $str_CREATION_DATE_TIME | cut -d" " -f2`
	i_CREATION_HOUR=`echo $str_CREATION_DATE_TIME | cut -d" " -f3| cut -d":" -f1`
	i_CREATION_MINUTE=`echo $str_CREATION_DATE_TIME | cut -d" " -f3| cut -d":" -f2`

	i_MINUTES_SINCE_CREATION=`expr $i_CREATION_MINUTE + $i_CREATION_HOUR '*' 60 + $i_CREATION_DAY '*' 1440 + $i_CREATION_MONTH '*' 43200`

	i_CURRENT_DAY=`date +%d`
	i_CURRENT_MONTH=`date +%m`
	i_CURRENT_HOUR=`date +%H`
	i_CURRENT_MINUTE=`date +%M`

	i_CURRENT_MINUTES_SINCE_BEGINNION_OF_YEAR=`expr $i_CURRENT_MINUTE + $i_CURRENT_HOUR '*' 60 + $i_CURRENT_DAY '*' 1440 + $i_CURRENT_MONTH '*' 43200`

	i_MINUTES_SINCE_CACTHE_UPDATE=`expr $i_CURRENT_MINUTES_SINCE_BEGINNION_OF_YEAR - $i_MINUTES_SINCE_CREATION`

	if [ $i_CREATION_MONTH -gt $i_CURRENT_MONTH -o \
		\( $i_CREATION_MONTH -eq $i_CURRENT_MONTH -a $i_CREATION_DAY -gt $i_CURRENT_DAY \) -o \
		\( $i_CREATION_MONTH -eq $i_CURRENT_MONTH -a $i_CREATION_DAY -eq $i_CURRENT_DAY -a $i_CREATION_HOUR -gt $i_CURRENT_HOUR \) ]
	then
		# This assumes there are 365 days in a year (365 * 24 * 60)
		# Adjusting if file creation year was in last year
		i_MINUTES_SINCE_CACTHE_UPDATE=`expr $i_MINUTES_SINCE_CACTHE_UPDATE + 525600`
	fi

	i_MINUTES_FOR_WHICH_CACHE_IS_VALID=`expr 60 '*' $i_CATCHE_HOURS`

	if [ $i_MINUTES_SINCE_CACTHE_UPDATE -ge $i_MINUTES_FOR_WHICH_CACHE_IS_VALID ]
	then
		return 0
	fi

	return 1
}

findopts_get_ored_names()
{
	if [ $# -eq 0 ]
	then
		echo "findopts_get_ored_names() expects one or more arguments." 1>&2
		exit 1
	fi

	str_OR_NAME="-name $1"
	shift

	while [ $# -gt 0 ]
	do
		str_OR_NAME="$str_OR_NAME -o -name $1"
		shift
	done

	echo "( $str_OR_NAME )"
}

egrepregex_get_name()
{
	echo "$1" | sed -e 's/\(^[^*]\)/\/\1/' -e 's/^\*//' -e 's/\./\\./g' -e 's/\*/.*/g' -e 's/$/$/'
}

egrepregex_get_ored_names()
{
	if [ $# -eq 0 ]
	then
		echo "egrepregex_get_ored_names() expects one or more arguments." 1>&2
		exit 1
	fi

	str_OR_NAME=`egrepregex_get_name "$1"`
	shift

	while [ $# -gt 0 ]
	do
		str_OR_NAME="${str_OR_NAME}|`egrepregex_get_name $1`"
		shift
	done

	echo "$str_OR_NAME"
}

findopts_construct_parameter_segment()
{
	str_TYPE=''
	str_NAMES=''
	str_NAMES_REGEX=''
	str_OTHER=''
	str_TAG=''
	str_REGEX=''

	while [ $# -gt 0 ]
	do
		case "$1" in
			-b|-c|-d|-p|-f|-l|-s|-D)
				str_THIS_TYPE="-type `echo $1 | sed -e's/^-//'`"
				if [ -n "$str_TYPE" ]
				then
					str_TYPE="$str_TYPE -o $str_THIS_TYPE"
				else
					str_TYPE="$str_THIS_TYPE"
				fi
				;;
			-n)	shift
				str_NAMES=" `findopts_get_ored_names $1` "
				str_NAMES_REGEX=`egrepregex_get_ored_names $1`
				;;
			-t)	shift
				str_TAG="$1"
				;;
			-o)	shift
				str_OTHER="$1"
				;;
			-r)	shift
				str_REGEX="$1"
				;;
			*)	echo "Invalid parameter sent to $0: $1" 1>&2
				;;
		esac
		shift
	done

	if [ -z "$str_TAG" ]
	then
		echo "-t parameter can not be empty." 1>&2
		exit 1
	fi

	if [ -n "$str_TYPE" ]
	then
		str_TYPE="( $str_TYPE )"
	fi

	str_FINDOPT_FOR_ROOT_SEARCH="$str_FINDOPT_FOR_ROOT_SEARCH , ( ${str_NAMES} ${str_TYPE} ${str_OTHER}"
	if [ "$OS" != "$OS_TYPE_HPUX" ]
	then
		# On Aix/Linux/SunOS -ls is directly supported
		str_FINDOPT_FOR_ROOT_SEARCH="$str_FINDOPT_FOR_ROOT_SEARCH -ls"
	else
		# On HP-UX -ls is not supported. Therefore, we will pipe the output of find with
		# xargs ls -dils
		str_FINDOPT_FOR_ROOT_SEARCH="$str_FINDOPT_FOR_ROOT_SEARCH -print"
	fi
	str_FINDOPT_FOR_ROOT_SEARCH="$str_FINDOPT_FOR_ROOT_SEARCH )"

	if [ -n "$str_NAMES_REGEX" ]
	then
		if [ -n "$str_REGEX" ]
		then
			str_REGEX="$str_REGEX.*($str_NAMES_REGEX)"
		else
			str_REGEX="$str_NAMES_REGEX"
		fi
	fi

	if [ -n "$str_REGEX" ]
	then
		str_TAG_STORE_FILE_PATH="$str_STAGING_DIRECTORY/$str_TAG"

#		echo "egrep \"$str_REGEX\" \"$str_FIND_FILES_CACHE_PATH\" | cut -d' ' -f 11- | sed -e 's/\\\\\\([^\\\\]\\)/\\1/g' > \"$str_TAG_STORE_FILE_PATH\"" >> "$str_GENERATED_SCRIPT_FOR_POST_PROCESSING_PATH"
		echo "egrep \"$str_REGEX\" \"$str_FIND_FILES_CACHE_PATH\" | cut -d' ' -f 11- | sort | uniq > \"$str_TAG_STORE_FILE_PATH\"" >> "$str_GENERATED_SCRIPT_FOR_POST_PROCESSING_PATH"
		echo "if [ ! -s \"$str_TAG_STORE_FILE_PATH\" ] ; then rm -f \"$str_TAG_STORE_FILE_PATH\" ; fi" >> "$str_GENERATED_SCRIPT_FOR_POST_PROCESSING_PATH"
	fi
}

findopts_construct_parameter_segment_for_single_executable()
{
	str_EXECUTABLE_NAME="$1"
	str_TAG_NAME=`echo $1 | capitalise_word | sed -e 's/^/f/'`
	findopts_construct_parameter_segment -f -n "$str_EXECUTABLE_NAME" -t "$str_TAG_NAME" -r "${str_REGEX_BEFORE_PERM_ALL_MATCH}$str_REGEX_FOR_PERM_OX"
}

exit_if_we_need_not_update_cache_else_clear_old_cache()
{
	if do_we_need_to_update_cache
	then
		rm -f "$str_FIND_FILES_CACHE_PATH" "$str_FIND_ERRORS_PATH" "$str_FIND_FILES_CACHE_UNUSABLE_PATH"
	else
		exit 0
	fi

	if check_if_disk_usage_percentage_has_exceeded
	then
		write_low_disk_space_message_into_file
		exit 1
	fi
}

process_single_directory_to_be_pruned()
{
	case "$OS" in
		$OS_TYPE_LINUX|$OS_TYPE_HPUX)
			str_CURRENT_FIND_PRUNE_PARAMETER="-path $1"
			;;
		*)
			str_CURRENT_FIND_PRUNE_PARAMETER="-name `basename \"$1\"`"
		;;
	esac

	if [ -n "$str_FIND_PRUNE_PARAMETER" ]
	then
		str_FIND_PRUNE_PARAMETER="$str_FIND_PRUNE_PARAMETER -o $str_CURRENT_FIND_PRUNE_PARAMETER"
	else
		str_FIND_PRUNE_PARAMETER="$str_CURRENT_FIND_PRUNE_PARAMETER"
	fi
}

process_directories_to_be_pruned()
{
	str_FINDOPT_PRUNE_EXPRESSION="$str_FINDOPT_PRUNE_REMOTE_FS"

	for str_DIRECTORY_TO_BE_PRUNED in /cdrom /dev /mnt /proc /sys /tcb /vol /xfn
	do
		process_single_directory_to_be_pruned "$str_DIRECTORY_TO_BE_PRUNED"
	done

	while [ $i_DIRECTORIES_TO_BE_PRUNED_COUNT -gt 0 ]
	do
		str_DIRECTORY_TO_BE_PRUNED=`eval echo '$'str_DIRECTORY_TO_BE_PRUNED_${i_DIRECTORIES_TO_BE_PRUNED_COUNT}`
		process_single_directory_to_be_pruned "$str_DIRECTORY_TO_BE_PRUNED"
		i_DIRECTORIES_TO_BE_PRUNED_COUNT=`expr $i_DIRECTORIES_TO_BE_PRUNED_COUNT - 1`
	done

	if [ -n "$str_FIND_PRUNE_PARAMETER" ]
	then
		str_FIND_PRUNE_PARAMETER="( ( $str_FIND_PRUNE_PARAMETER ) -prune )"
		str_FINDOPT_PRUNE_EXPRESSION="$str_FINDOPT_PRUNE_EXPRESSION -o $str_FIND_PRUNE_PARAMETER"
	fi
}

process_scan_directories_if_any_or_use_root()
{
	if [ $i_DIRECTORIES_TO_BE_SCANNED_COUNT -eq 0 ]
	then
		str_SEARCH_PATH_TO_BE_USED='/'
	fi

	while [ $i_DIRECTORIES_TO_BE_SCANNED_COUNT -gt 0 ]
	do
		str_DIRECTORY_TO_BE_SCANNED=`eval echo '$'str_DIRECTORY_TO_BE_SCANNED_${i_DIRECTORIES_TO_BE_SCANNED_COUNT}`
		if [ -n "$str_SEARCH_PATH_TO_BE_USED" ]
		then
			str_SEARCH_PATH_TO_BE_USED="$str_SEARCH_PATH_TO_BE_USED $str_DIRECTORY_TO_BE_SCANNED"
		else
			str_SEARCH_PATH_TO_BE_USED="$str_DIRECTORY_TO_BE_SCANNED"
		fi
		i_DIRECTORIES_TO_BE_SCANNED_COUNT=`expr $i_DIRECTORIES_TO_BE_SCANNED_COUNT - 1`
	done
}

generate_script_for_post_processing()
{
	str_GENERATED_SCRIPT_FOR_POST_PROCESSING_PATH="$str_STAGING_DIRECTORY/post_processing_script_${i_PID}_${str_TIMESTAMP}"
	echo '#!/bin/sh' > "$str_GENERATED_SCRIPT_FOR_POST_PROCESSING_PATH"
	echo "if [ ! -f \"$str_FIND_FILES_CACHE_PATH\" ]; then echo \"Cache file $str_FIND_FILES_CACHE_PATH doesn't exist.\" 1>&2 ; exit 1 ; fi" >> "$str_GENERATED_SCRIPT_FOR_POST_PROCESSING_PATH"
	chmod 750 "$str_GENERATED_SCRIPT_FOR_POST_PROCESSING_PATH"
}

write_low_disk_space_message_into_file()
{
	echo "LOW_SPACE_ERROR: Can't run disa-findFiles script because the '$str_STAGING_DIRECTORY' space usage is greater than ${i_MAX_DISK_PERCENTAGE}%. Current disk usage is ${i_DISK_PERCENTAGE_USED}%. Please free up disk space or increase the disk usage percentage for the 'TARGET.MAX_DISK_PERCENTAGE' property." >> "$str_FIND_FILES_CACHE_UNUSABLE_PATH"
}

create_and_execute_find_timeout_script()
{
	echo "#!/bin/sh" > "$str_ALRM_SCRIPT_PATH"
	echo "i_SIGTERM=$i_SIGTERM" >> "$str_ALRM_SCRIPT_PATH"
	echo "str_PPNAME=`basename \"$0\"`" >> "$str_ALRM_SCRIPT_PATH"
	echo "i_FINDFILE_TIMEOUT=$i_FINDFILE_TIMEOUT" >> "$str_ALRM_SCRIPT_PATH"
	echo "str_FIND_FILES_CACHE_UNUSABLE_PATH=$str_FIND_FILES_CACHE_UNUSABLE_PATH" >> "$str_ALRM_SCRIPT_PATH"

	sed -e '/^####CODE-FOR-TIME-OUT-CHECK-START####$/,/^####CODE-FOR-TIME-OUT-CHECK-END####$/ !d' "$0" >>"$str_ALRM_SCRIPT_PATH"
	chmod 700 "$str_ALRM_SCRIPT_PATH"
	"$str_ALRM_SCRIPT_PATH" </dev/null &
	return 0

####CODE-FOR-TIME-OUT-CHECK-START####
	trap 'exit 0' $i_SIGTERM

	if [ $i_FINDFILE_TIMEOUT -eq 0 ]
	then
		exit 0
	fi

	sleep "$i_FINDFILE_TIMEOUT"

	echo "Time out occured: Bailing out from cache creation as stipulated number of $i_FINDFILE_TIMEOUT seconds have already elapsed. Please pass a larger value to complete cache creation." >> "$str_FIND_FILES_CACHE_UNUSABLE_PATH"

	i_PID=`ps -ef | grep "$str_PPNAME" | sed -e 's/^[ ]*//' -e 's/  */ /g' | cut -d' ' -f2`
	if [ -n "$i_PID" ]
	then
		kill -$i_SIGTERM $i_PID 1>/dev/null 2>/dev/null
	fi

	exit 0

####CODE-FOR-TIME-OUT-CHECK-END####
}

kill_a_script_with_path()
{
	str_SCRIPT_NAME=`basename "$1"`
	i_PID=`ps -ef | grep "$str_SCRIPT_NAME" | sed -e 's/^[ ]*//' -e 's/  */ /g' | cut -d' ' -f2`

	if [ ! -z "$i_PID" ]
	then
		kill -$i_SIGTERM $i_PID 1>/dev/null 2>/dev/null
	fi
}

finalise()
{
	kill_a_script_with_path "$str_ALRM_SCRIPT_PATH"

	rm -f "$str_GENERATED_SCRIPT_FOR_POST_PROCESSING_PATH" "$str_FIND_FILES_CACHE_PATH" "$str_ALRM_SCRIPT_PATH" "${str_FIND_FILES_CACHE_PATH}.1"
	touch "$str_FIND_FILES_CACHE_PATH"
}

handle_sigterm()
{
	touch "$str_FIND_FILES_CACHE_UNUSABLE_PATH"

	kill_find_processes_running_in_the_background

	finalise
	exit 1
}

check_if_disk_usage_percentage_has_exceeded()
{
	i_DISK_PERCENTAGE_USED=`df -k "$str_STAGING_DIRECTORY" | sed -e '2,$!d' | grep "%" | cut -d"%" -f1 | awk '{ print $NF }'`

	if [ -z "$i_DISK_PERCENTAGE_USED" -o `echo "$i_DISK_PERCENTAGE_USED" | egrep -c '[^0-9]'` -ne 0 ]
	then
		echo "Invalid value for disk percentage: $i_DISK_PERCENTAGE_USED" 1>&2
		return 0
	fi

	if [ $i_DISK_PERCENTAGE_USED -ge $i_MAX_DISK_PERCENTAGE ]
	then
		return 0
	fi

	return 1
}

kill_find_processes_running_in_the_background()
{
	if [ -n "$str_BACKGROUND_PROCESS_PIDS" ]
	then
		kill -$i_SIGKILL $str_BACKGROUND_PROCESS_PIDS >/dev/null 2>&1
	fi
}

get_global_find_results_ready_for_post_processing()
{
	cat "${str_FIND_FILES_CACHE_PATH}.1" |
	if [ "$OS" = "$OS_TYPE_HPUX" ]
	then
		sed -e 's/^/"/' -e 's/$/"/' | xargs ls -dils
	else
		tee
	fi | sed -e 's/^[[:space:]]*//' | tr -s ' ' >"$str_FIND_FILES_CACHE_PATH"

	#The intermediate cache file is no longer required
	rm -f "${str_FIND_FILES_CACHE_PATH}.1"
}

wait_for_find_processes_to_exit ()
{
	if [ -z "$1" ]
	then
		i_PROC_COUNT=1
	else
		i_PROC_COUNT="$1"
	fi
	
	while [ `ps -p "$str_BACKGROUND_PROCESS_PIDS" | grep -v defunct | wc -l` -gt "$i_PROC_COUNT" ]
	do
		if check_if_disk_usage_percentage_has_exceeded
		then
			write_low_disk_space_message_into_file
			kill_find_processes_running_in_the_background
			break
		fi
		sleep 3
	done	
}

wait_for_find_processes_to_exit_and_do_post_processing()
{
	wait_for_find_processes_to_exit

	get_global_find_results_ready_for_post_processing
	"$str_GENERATED_SCRIPT_FOR_POST_PROCESSING_PATH"

	cat "$str_STAGING_DIRECTORY"/fLIF-Temp-* >"$str_STAGING_DIRECTORY/fLocalInitializationFiles" 2>>"$str_FIND_ERRORS_PATH"
	rm -f "$str_STAGING_DIRECTORY"/fLIF-Temp-*
	cat "$str_STAGING_DIRECTORY"/fV914-Temp-* >"$str_STAGING_DIRECTORY/fV914" 2>>"$str_FIND_ERRORS_PATH"
	rm -f "$str_STAGING_DIRECTORY"/fV914-Temp-*
	cat "$str_STAGING_DIRECTORY"/fV915-Temp-* >"$str_STAGING_DIRECTORY/fV915" 2>>"$str_FIND_ERRORS_PATH"
	rm -f "$str_STAGING_DIRECTORY"/fV915-Temp-*
	cat "$str_STAGING_DIRECTORY"/fV22351-Temp-* >"$str_STAGING_DIRECTORY/fV22351" 2>>"$str_FIND_ERRORS_PATH"
	rm -f "$str_STAGING_DIRECTORY"/fV22351-Temp-*
}

execute_find_for_root_or_scan_directories()
{
	generate_script_for_post_processing

	str_FINDOPT_FOR_ROOT_SEARCH="$str_FINDOPT_PRUNE_EXPRESSION"

	######################################################################
	# Rule:      fHttpd
	# Search:    Search for the location of the HTTP servers.
	# Criteria:  Just be there to be examined later for versions.
	# Action:    Display file path listing with "fHttpd" prefix
	#
	findopts_construct_parameter_segment_for_single_executable httpd

	######################################################################
	# Rule:      fMibfile
	# Search:    Search for the location of all mib files.
	# Criteria:  * must end with .mib and be a regular file
	# Action:    Display file path listing with "fMibfile" prefix
	findopts_construct_parameter_segment -f -n '*.mib' -t fMibfile

	######################################################################
	# Rule:      fThunderbird
	# Search:    Search for the location of the Thunderbird program, if there.
	# Criteria:  must be executable and be over 2MB in size and be named thunderbird
	# Action:    Display file path listing with "fThunderbird" prefix
	#
	findopts_construct_parameter_segment_for_single_executable thunderbird

	######################################################################
	# Rule:      fSnort
	# Search:    Search for the location of the snort program, if there.
	# Criteria:
	# Action:    Display file path listing with "fSnort" prefix
	#
	#( -type f ) <- taken out. Would not "tag" the snort executable with
	#               the file type in the search string.
	findopts_construct_parameter_segment_for_single_executable snort

	######################################################################
	# Rule:      fMcafee
	# Search:    Search for the location of the Mcafee program, if there.
	# Criteria:
	# Action:    Display file path listing with "fMcafee" prefix
	findopts_construct_parameter_segment -f -n '*clean.dat *names.dat *scan.dat' -t fMcafee

	######################################################################
	# Rule:      fNamed
	# Search:    Search for the location of the named program.
	# Criteria:
	# Action:    Display file path listing with "fNamed" prefix
	#
	findopts_construct_parameter_segment_for_single_executable named

	######################################################################
	# Rule:      fInNamed
	# Search:    Search for the location of the in.named program.
	# Criteria:
	# Action:    Display file path listing with "fInNamed" prefix
	#
	findopts_construct_parameter_segment_for_single_executable in.named

	######################################################################
	# Rule:      fSunInFtpd
	# Search:    Search for the location of the SunInFtpd program, if there.
	#            The "SunIn" part of the label simply means the Sun supplied
	#            vendor form of ftpd.
	# Criteria:
	# Action:    Display file path listing with "fSunInFtpd" prefix
	#
	findopts_construct_parameter_segment -f -n in.ftpd -t fSunInFtpd

	######################################################################
	# Rule:      fCamStat
	# Search:    Search for the location of the CamStat program, if there.
	# Criteria:
	# Action:    Display file path listing with "fCamStat" prefix
	#
	findopts_construct_parameter_segment_for_single_executable camstat

	######################################################################
	# Rule:      fTshark
	# Search:    Search for the location of the Tshark program, if there.
	# Criteria:
	# Action:    Display file path listing with "fTshark" prefix
	#
	findopts_construct_parameter_segment_for_single_executable tshark

	######################################################################
	# Rule:      fWireshark
	# Search:    Search for the location of the wireshark program, if there.
	# Criteria:
	# Action:    Display file path listing with "fWireshark" prefix
	#
	findopts_construct_parameter_segment_for_single_executable wireshark

	######################################################################
	# Rule:      fTcpdump
	# Search:    Search for the location of the tcpdump program, if there.
	# Criteria:
	# Action:    Display file path listing with "fTcpdump" prefix
	#
	findopts_construct_parameter_segment_for_single_executable tcpdump

	######################################################################
	# Rule:      fSnoop
	# Search:    Search for the location of the snoop program, if there.
	# Criteria:
	# Action:    Display file path listing with "fSnoop" prefix
	#
	findopts_construct_parameter_segment_for_single_executable snoop
	
	######################################################################
	# Rule:      fNc
	# Search:    Search for the location of the nc program, if there.
	# Criteria:
	# Action:    Display file path listing with "fNc" prefix
	#
	findopts_construct_parameter_segment_for_single_executable nc

	######################################################################
	# Rule:      fNetcat
	# Search:    Search for the location of the netcat program, if there.
	# Criteria:
	# Action:    Display file path listing with "fNetcat" prefix
	#
	findopts_construct_parameter_segment_for_single_executable netcat

	######################################################################
	# Rule:      fEthereal
	# Search:    Search for the location of the Ethereal program, if there.
	# Criteria:
	# Action:    Display file path listing with "fEthereal" prefix
	#
	findopts_construct_parameter_segment_for_single_executable ethereal

	######################################################################
	# Rule:      fTraceroute
	# Search:    Search for the location of the Ethereal program, if there.
	# Criteria:
	# Action:    Display file path listing with "fEthereal" prefix
	#
	findopts_construct_parameter_segment_for_single_executable traceroute

	######################################################################
	# Rule:      fVncServer
	# Search:    Search for the location of the VncServer program, if there.
	# Criteria:
	# Action:    Display file path listing with "fVncServer" prefix
	#
	findopts_construct_parameter_segment_for_single_executable vncserver

	######################################################################
	# Rule:      fSnmpConf
	# Search:    Search for the location of the VncServer program, if there.
	# Criteria:
	# Action:    Display file path listing with "fSnmpConf" prefix
	#
	findopts_construct_parameter_segment -f -n snmpd.conf -t fSnmpConf

	######################################################################
	# Rule:      fGenWuFtpd
	# Search:    Search for the location of the GenWuFtpd program, if there.
	#            The "Gen" part of the label simply means the generic, non-
	#            vendor form of wu-ftpd that can be downloaded either as a
	#            compilable source OR downloaded as an already pre-compiled
	#            binary "...tar.gz" file.
	# Criteria:
	# Action:    Display file path listing with "fGenWuFtpd" prefix
	#
	findopts_construct_parameter_segment_for_single_executable ftpd

	######################################################################
	# Rule:      fAuditType
	# Search:    Search for the location of audit conf files.
	# Criteria:
	# Action:    Display file path listing with "fAuditType" prefix
	#
	findopts_construct_parameter_segment -f -n "audit.rules filter.conf" -t fAuditType

	######################################################################
	# Rule:      squid
	# Search:    Search for the location of the squid program, if there.
	# Criteria:  must be executable.
	# Action:    Display file path listing with "fSquid" prefix
	#
	findopts_construct_parameter_segment_for_single_executable squid

	######################################################################
	# Rule:      fNetDaemons
	# Search:    Search for network service daemons and verify that
	#            ownership and permissions are correct.
	# Criteria:  * must have the name of a known network service daemon
	#              (The "*" in the filename specifies account for files
	#              that are prefixed with "in."; "tftpd" is covered under
	#              "*ftpd"; "ntalkd" is covered under "*talkd")
	#            * must be a regular file
	#            * must have any of the following permission modes set:
	#                 the "set-UID" bit,
	#                 the "set-GID" bit,
	#                 the "sticky" bit, or
	#                 any write permission bit
	# Action:    Display directory listing with "fNetDaemons" prefix
	strNetDaemons='inetd *admind *sshd *fingerd *ftpd *httpd *identd *lpd *mountd *nfsd *pppd *remshd *rexecd *rlogd *rlogind *rquotad *rshd *rsprayd *rstatd *rusersd *rwalld *rwhod *snmpd *snmptrapd *talkd *tcpd *telnetd *timed *pcnfsd'
	findopts_construct_parameter_segment -f -n "$strNetDaemons" -t fNetDaemons

	######################################################################
	# Rule:      fRhosts
	# Search:    Search for any network host-access files that enable
	#            password-free access to peer systems
	# Criteria:  * must have the name "hosts.equiv," ".netrc," ".nodes,"
	#              or ".rhosts"
	#            * must be a regular file
	# Action:    Display directory listing with "fRhosts" prefix
	#
	str_RHOSTS='hosts.equiv .netrc .nodes .rhosts .shosts shosts.equiv'
	findopts_construct_parameter_segment -f -n "$str_RHOSTS" -t fRhosts

	######################################################################
	# Rule:      fSecTools
	# Search:    Search for any files indicating the presence of a
	#            security assessment tool.
	# Criteria:  * must have the name "cops," "esmd," "itad," "spi,"
	#              "tiger," or "tripwire"
	#            * must be a regular file
	# Action:    Display directory listing with "fSecTools" prefix
	str_SECURITY_TOOLS='cops esmd itaagtd itamgrd spi SpiNet tiger tripwire aide c50a tera merlin iptables ipchains Start-SRR Tara tara merlin snare issDaemon'
	findopts_construct_parameter_segment -f -n "$str_SECURITY_TOOLS" -t fSecTools

	######################################################################
	# Rule:      fStartup
	# Search:    Search for well-known startup files
	# Criteria:  * must have the name as enumerated in the filter below
	#            * must be a regular file
	# Action:    Display directory listing with "fStartup" prefix
	# TW Added .kshrc and .cshrc
	str_START_UP_SCRIPTS='.cshrc .dtprofile .emacs .exrc .login .logout .bash_profile .profile .Xauthority .Xdefaults .Xinit .kshrc .cshrc .Xresource .Xsession local.dtprofile local.emacs local.exrc local.login local.logout local.profile local.Xauthority local.Xdefaults local.Xinit local.kshrc local.cshrc local.Xresource'
	str_START_UP_SCRIPTS_PERM="( $str_FINDOPT_PERM_GW -o $str_FINDOPT_PERM_GX -o $str_FINDOPT_PERM_WR -o $str_FINDOPT_PERM_WW -o $str_FINDOPT_PERM_WX -o $str_FINDOPT_PERM_SUID -o $str_FINDOPT_PERM_SGID )"
	str_START_UP_SCRIPTS_PERM_REGEX="${str_REGEX_BEFORE_PERM_ALL_MATCH}($str_REGEX_FOR_PERM_GW|$str_REGEX_FOR_PERM_GX|$str_REGEX_FOR_PERM_OR|$str_REGEX_FOR_PERM_OW|$str_REGEX_FOR_PERM_OX|$str_REGEX_FOR_PERM_SUID|$str_REGEX_FOR_PERM_SGID) "
	findopts_construct_parameter_segment -f -n "$str_START_UP_SCRIPTS" -t fStartup -o "$str_START_UP_SCRIPTS_PERM" -r "$str_START_UP_SCRIPTS_PERM_REGEX"

	######################################################################
	# This was searching for world writable directories without the sticky
	# bit set, indicating that any directory can be world writable if it has
	# the sticky bit set - not true.  There are certain public directories:
	# $STAGE_DIR/var$STAGE_DIR/var/spool/uucppublic /var/pkg, and, just to be generous,
	# any directory which is named tmp or temp.  TW 5/21/01
	# Rule:      fSticky
	# Search:    Search for any directory objects that have the sticky-bit
	#            ("t") assigned.
	# Criteria:  * must be a directory
	#            * have the world-write permission AND the "sticky" bit not set
	# Action:    Display directory listing with "fSticky" prefix
	#
	str_STICK_PERM_DIRECTORIES='tmp temp pkg uucppublic'
	str_STICK_PERM_PARAMETER_NAMES=`findopts_get_ored_names $str_STICK_PERM_DIRECTORIES`
	str_STICK_PERM_PARAMETER_NAMES_REGEX=`egrepregex_get_ored_names $str_STICK_PERM_DIRECTORIES`
	str_STICK_PERM_PARAMETER="( ( $str_STICK_PERM_PARAMETER_NAMES $str_FINDOPT_PERM_WW ! $str_FINDOPT_PERM_STICKY ) -o ( $str_FINDOPT_PERM_STICKY -a ( $str_FINDOPT_UID +20 -o $str_FINDOPT_GID +19 ) ) )"
	findopts_construct_parameter_segment -d -t fSticky -o "$str_STICK_PERM_PARAMETER" -r "${str_REGEX_BEFORE_PERM_ALL_MATCH}d.......(w[-x].*($str_STICK_PERM_PARAMETER_NAMES_REGEX)|.[sS])"

	######################################################################
	# Rule:      fSgid
	# Search:    Search for any object that has the set-GID
	#            bits ("s") set
	# Criteria:  * must have the "set-GID" bit set
	# Action:    Display directory listing with "fSgid" prefix
	#
	findopts_construct_parameter_segment -f -o "$str_FINDOPT_PERM_SGID" -t fSgid -r "${str_REGEX_BEFORE_PERM_ALL_MATCH}$str_REGEX_FOR_PERM_SGID"

	######################################################################
	# Rule:      fSuid
	# Search:    Search for any object that has the set-UID or the set-GID
	#            bits ("s") set, inclusively.
	# Criteria:  * must either have the "set-UID" or "set-GID" bits set
	# Action:    Display directory listing with "fSuid" prefix
	#
	findopts_construct_parameter_segment -f -o "$str_FINDOPT_PERM_SUID" -t fSuid -r "${str_REGEX_BEFORE_PERM_ALL_MATCH}$str_REGEX_FOR_PERM_SUID"

	######################################################################
	# Rule:      fUneven
	# Search:    Search for any object that has uneven permissions
	#            assigned.
	# Criteria:  * must have the group-exec permission set AND NOT owner-exec OR
	#            * must have the group-write permission set AND NOT owner-write OR
	#            * must have the group-read permission set AND NOT owner-read OR
	#            * must have the world-exec permission set AND NOT owner-exec OR
	#            * must have the world-write permission set AND NOT owner-write OR
	#            * must have the world-read permission set AND NOT owner-read OR
	#            * must have the world-exec permission set AND NOT group-exec OR
	#            * must have the world-write permission set AND NOT group-write OR
	#            * must have the world-read permission set AND NOT group-read OR
	#
	# Action:    Display directory listing with "fUneven" prefix
	#
	str_UNEVEN_PERM_OTHER_PARAMETER="-a ( ( $str_FINDOPT_UID -21 -o $str_FINDOPT_GID -20 ) -a ( -perm -0002 ) )
		-a ( ( ! $str_FINDOPT_PERM_OX ( $str_FINDOPT_PERM_GX -o $str_FINDOPT_PERM_WX ) )
		-o ( ! $str_FINDOPT_PERM_OW ( $str_FINDOPT_PERM_GW -o $str_FINDOPT_PERM_WW ) )
		-o ( ! $str_FINDOPT_PERM_OR ( $str_FINDOPT_PERM_GR -o $str_FINDOPT_PERM_WR ) )
	        -o ( ! $str_FINDOPT_PERM_GX $str_FINDOPT_PERM_WX )
	        -o ( ! $str_FINDOPT_PERM_GW $str_FINDOPT_PERM_WW )
		-o ( ! $str_FINDOPT_PERM_GR $str_FINDOPT_PERM_WR ) )"
	str_UNEVEN_PERM_OTHER_PARAMETER_REGEX="${str_REGEX_BEFORE_PERM_ALL_MATCH}(...[-S]..([xs]...|...[xt])|..-..(w...|...w).|.-..(r...|...r)..|......[-S]..[xt]|.....-..w.|....-..r..)"

	findopts_construct_parameter_segment -f -o "$str_UNEVEN_PERM_OTHER_PARAMETER" -t fUneven -r "$str_UNEVEN_PERM_OTHER_PARAMETER_REGEX"

	######################################################################
	# Rule:      fBrowser
	# Search:    Search for the location of the netscape program, if there.
	# Criteria:  must be executable and be over 2MB in size and be named netscape,
	#            or netscape.bin.
	# Action:    Display file path listing with "fBrowser" prefix
	findopts_construct_parameter_segment -d -n '.mozilla .netscape' -t fBrowser

	######################################################################
	# Rule:      fOpenSSL
	# Search:    Search for the location of the openssl program, if there.
	# Criteria:  must be executable and be named openssl
	# Action:    Display file path listing with "fOpenSSL" prefix
	#
	findopts_construct_parameter_segment_for_single_executable openssl

	######################################################################
	# Rule:      fJava
	# Search:    Search for the location of the java program, if there.
	# Criteria:  must be executable and be named java
	# Action:    Display file path listing with "fJava" prefix
	#
	findopts_construct_parameter_segment_for_single_executable java

	######################################################################
	# Rule: file_world_writable_dir
	# Search:    Search for any directory objects that have the sticky-bit
	#            ("t") assigned.
	# Criteria:  * must be a directory
	#            * have the world-write permission AND the "sticky" bit not set
	# Action:    Display directory listing
	#
	findopts_construct_parameter_segment -d -t fWwdir -o "$str_FINDOPT_PERM_WW ! $str_FINDOPT_PERM_STICKY" -r "${str_REGEX_BEFORE_PERM_ALL_MATCH}d.......w[-x]"

	######################################################################
	# Rule: file_world_writable_dir_with_sticky_bit
	# Search:    Search for any directory objects that have the sticky-bit
	#            ("t") assigned.
	# Criteria:  * must be a directory
	#            * have the world-write permission AND the "sticky" bit set
	# Action:    Display directory listing
	#
	findopts_construct_parameter_segment -d -t fUnAuthWwdir -o "$str_FINDOPT_PERM_WW" -o "$str_FINDOPT_PERM_STICKY" -r "${str_REGEX_BEFORE_PERM_ALL_MATCH}d.......w[tT]"

	######################################################################
	# Rule: unauth_world_readable_file
	# Search:    Search for world readable files
	#
	findopts_construct_parameter_segment -f -t fUnAuthWrfile -o "$str_FINDOPT_PERM_WR" -r "${str_REGEX_BEFORE_PERM_ALL_MATCH}$str_REGEX_FOR_PERM_WR"

	######################################################################
	# Rule: unauth_world_writable_file
	# Search:    Search for world writable files
	#
	findopts_construct_parameter_segment -f -t fUnAuthWwfile -o "$str_FINDOPT_PERM_WW" -r "${str_REGEX_BEFORE_PERM_ALL_MATCH}$str_REGEX_FOR_PERM_WW"

	######################################################################
	# Rule: unauth_world_executable_file
	# Search:    Search for world executable files
	#
	findopts_construct_parameter_segment -f -t fUnAuthWxfile -o "$str_FINDOPT_PERM_WX" -r "${str_REGEX_BEFORE_PERM_ALL_MATCH}$str_REGEX_FOR_PERM_WX"

	######################################################################
	# Rule: unauth_group_writable_file
	# Search:    Search for world executable files
	#
	#findopts_construct_parameter_segment -f -t fUnAuthGwfile -o '-perm -0020' -r "${str_REGEX_BEFORE_PERM_ALL_MATCH}$str_REGEX_FOR_PERM_GW"

	######################################################################
	# Rule:      fUnownedUser
	# Search:    Search for any object that has an owner whose UID is not
	#            registered in /etc/passwd.
	# Criteria:  * must have no valid owner
	# Action:    Display file/directory listing with "fUnownedUser" prefix
	#
	# This case will be handled specially. There can't be any egrep regex match for nouser or nogroup.
	# We will simply write such files into fUnownedUser file directly.

	findopts_construct_parameter_segment -f -d -t fUnownedUser -o '-nouser' -r "${str_REGEX_BEFORE_PERM_ALL_MATCH}[^ ]+ [0-9]+ [0-9]+ "
	
	######################################################################
	# Rule:      fUnownedGroup
	# Search:    Search for any object that has a group-owner whose GID
	#            is not registered in /etc/group.
	# Criteria:  * must have no valid group
	# Action:    Display file/directory listing with "fUnownedGroup" prefix
	#
	# This case will be handled specially. There can't be any egrep regex match for nouser or nogroup.
	# We will simply write such files into fUnownedGroup file directly.	
	findopts_construct_parameter_segment -f -d -t fUnownedGroup -o '-nogroup' -r "${str_REGEX_BEFORE_PERM_ALL_MATCH}[^ ]+ [0-9]+ [^ ]+ [0-9]+ "
	
	######################################################################
	# Rule:      fAuditTools
	# Search:    Search for the selected set of audit tools in filesystem.
	# Criteria:  Executable name must match
	# Action:    Display executable with given name.
	findopts_construct_parameter_segment -f -n "auditctl auditd ausearch aureport autrace audispd" -t fAuditTools -r "${str_REGEX_BEFORE_PERM_ALL_MATCH}$str_REGEX_FOR_PERM_OX"
	
	######################################################################
	# Rule:      fXauthority
	# Search:    Search for .Xauthority files in the file system.
	# Criteria:  Exact file name must match.
	# Action:    Display all .Xauthority files.
	findopts_construct_parameter_segment -f -n ".Xauthority" -t fXauthority

	find $str_SEARCH_PATH_TO_BE_USED $str_FINDOPT_FOR_ROOT_SEARCH 1>"${str_FIND_FILES_CACHE_PATH}.1" 2>"$str_FIND_ERRORS_PATH" &
	append_pid_into_list_of_background_processes "$!"
}

search_for_ww_and_gw_library_files()
{
	######################################################################
	# Rule:      disa-GEN001300
	# Search:    Library files more permissive than 755
	# Criteria:  Library files more permissive than 755
	# Action:    Display file path listing
	#######################################################################

	str_LIBDIRS="/usr/lib /usr/4lib /usr/share/lib /usr/platform/i86pc/lib /usr/openwin /usr/xpg4/lib /usr/sfw/lib /usr/dt/lib /usr/dt/appconfig /usr/perl5 /usr/j2se /usr/snadm/lib /usr/java1.2/jre/lib /usr/iplanet /usr/apache /var/sadm/smc/lib /etc/lib"
	str_LIBNAMES=`findopts_get_ored_names '*.a' 'llib*' '*.so' '*.so.*' '*.sl' '*.sl.*'`
	str_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fLibFilePerm"

	find $str_LIBDIRS $str_FINDOPT_PRUNE_EXPRESSION -o '(' -follow -type f $str_LIBNAMES -a '(' $str_FINDOPT_PERM_GW -o $str_FINDOPT_PERM_WW ')' -print ')' >"$str_TAG_FILE_PATH" 2>>"$str_FIND_ERRORS_PATH" &
	append_pid_into_list_of_background_processes "$!"
}


search_for_more_permissive_log_files()
{
	######################################################################
	# Rule:      disa-GEN001260
	# Search:    Check System log Files greater than 640 permissions
	# Criteria:  Check System log Files greater than 640 permissions
	# Action:    Display file path listing
	#######################################################################
	# Separate find required for system log files as it searches in
	# /var/log, /var/log/syslog, or /var/adm directories
	# It applies to disa-GEN001260.
	#######################################################################
	str_LOGDIRs="/var/log /var/log/syslog /var/adm"
	str_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fSyslogperm"

	find $str_LOGDIRs $str_FINDOPT_PRUNE_EXPRESSION -o '(' -follow -type f '(' $str_FINDOPT_PERM_OX -o $str_FINDOPT_PERM_GW -o $str_FINDOPT_PERM_GX -o $str_FINDOPT_PERM_WR -o $str_FINDOPT_PERM_WW -o $str_FINDOPT_PERM_WX ')' -print ')' >"$str_TAG_FILE_PATH" 2>>"$str_FIND_ERRORS_PATH" &
	append_pid_into_list_of_background_processes "$!"
}

search_for_more_permissive_man_pages()
{
	######################################################################
	# Rule:      disa-GEN001280
	# Search:    Manual page file permission more permissive than 644
	# Criteria:  Manual page file permission more permissive than 644
	# Action:    Display file path listing
	#######################################################################
	# Separate find required for Manual page as it searches in different directories
	# It applies to disa-GEN001280.
	#######################################################################
	str_MANDIRS="/usr/man /usr/share/man /usr/dt/man /usr/dt/share/man /usr/j2se/man /usr/java1.2/man /usr/local/man /usr/local/ssl/man /usr/local/ssh/man /usr/local/share/man /usr/openwin/man /usr/openwin/share/man /usr/sfw/man /usr/sfw/share/man /usr/SUNWale/man /usr/SUNWale/share/man /usr/apache/man /usr/perl5/man /usr/perl5/5.6.1/man /usr/perl5/5.00503/man /usr/lbin/man /usr/contrib/man /usr/demo/link_audit/man /usr/demon/SOUND/man /var/cache/man /usr/X11R6/man /usr/X/man /usr/share/pvm3/man /usr/local/apache2/man /opt/upgrade/share/man /usr/contrib/man /usr/local/lib/perl5/5.*/man /opt/pd/share/man /usr/share/man/info /usr/share/info /usr/share/infopage"
	str_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fManPagePerm"

	find $str_MANDIRS $str_FINDOPT_PRUNE_EXPRESSION -o '(' -follow -type f '!' -name makewhatis '(' $str_FINDOPT_PERM_OX -o $str_FINDOPT_PERM_GW -o $str_FINDOPT_PERM_GX -o $str_FINDOPT_PERM_WW -o $str_FINDOPT_PERM_WX ')' -print ')' >"$str_TAG_FILE_PATH" 2>>"$str_FIND_ERRORS_PATH" &
	append_pid_into_list_of_background_processes "$!"
}

search_for_rc_files()
{
	str_SEARCH_DIRECTORIES=''
	case "$OS" in
		$OS_TYPE_AIX)
			str_SEARCH_DIRECTORIES='/etc/rc*'
			;;
		$OS_TYPE_LINUX)
			str_SEARCH_DIRECTORIES='/etc/rc* /etc/init.d'
			;;
		$OS_TYPE_HPUX)
			str_SEARCH_DIRECTORIES='/sbin/init.d /sbin/rc* /etc/rc.config.d'
			;;
		$OS_TYPE_SUNOS)
			str_SEARCH_DIRECTORIES='/sbin/rc* /etc/init.d /etc/rc*'
			;;
	esac
	str_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fRcScriptFiles"

	find $str_SEARCH_DIRECTORIES $str_FINDOPT_PRUNE_EXPRESSION -o '(' -follow -type f -print ')' >"$str_TAG_FILE_PATH" 2>>"$str_FIND_ERRORS_PATH" &
	append_pid_into_list_of_background_processes "$!"
}

# For DISA rule GEN001200, GEN001220, GEN001240
search_for_more_permissive_system_commands()
{
	str_SEARCH_DIRECTORIES='/etc /bin /usr/bin /usr/lbin /usr/usb /sbin /usr/sbin'

	if [ "$OS" = $OS_TYPE_LINUX ]
	then
		i_UID=499
		i_GID=499
	else
		i_UID=99
		i_GID=99
	fi

	str_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fSysFPDOwn"
	find $str_SEARCH_DIRECTORIES $str_FINDOPT_PRUNE_EXPRESSION -o '(' -follow '(' -type f -o -type d ')' $str_FINDOPT_UID +$i_UID -print ')' >"$str_TAG_FILE_PATH" 2>>"$str_FIND_ERRORS_PATH" &
	append_pid_into_list_of_background_processes "$!"
        
	str_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fSysFPDGrpOwn"
	find $str_SEARCH_DIRECTORIES $str_FINDOPT_PRUNE_EXPRESSION -o '(' -follow '(' -type f -o -type d ')' $str_FINDOPT_GID +$i_GID -print ')' >"$str_TAG_FILE_PATH" 2>>"$str_FIND_ERRORS_PATH" &
	append_pid_into_list_of_background_processes "$!"
        
	str_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fSysCMDPerm"
	find $str_SEARCH_DIRECTORIES $str_FINDOPT_PRUNE_EXPRESSION -o '(' -follow -type f -a '(' '(' $str_FINDOPT_PERM_OX -o $str_FINDOPT_PERM_GX -o $str_FINDOPT_PERM_WX ')' -a '(' $str_FINDOPT_PERM_GW -o $str_FINDOPT_PERM_WW ')' ')' -print ')' >"$str_TAG_FILE_PATH" 2>>"$str_FIND_ERRORS_PATH" &
	append_pid_into_list_of_background_processes "$!"
}

# For DISA rule GEN001320, GEN001340, and GEN001360
search_for_yp_nis_files()
{
	str_SEARCH_DIRECTORIES='/var/yp /var/nis'
	case "$OS" in
		$OS_TYPE_AIX) str_SEARCH_DIRECTORIES="$str_SEARCH_DIRECTORIES /usr/lib/netsvc/yp /usr/lib/nis" ;;
		$OS_TYPE_SUNOS) str_SEARCH_DIRECTORIES="$str_SEARCH_DIRECTORIES /usr/lib/netsvc/yp" ;;
	esac

	for str_USER_OR_GROUP in root sys bin
	do
		if [ `egrep -c "^$str_USER_OR_GROUP:" /etc/passwd` -ne 0 ]
		then
			str_FINDOPT_USERS="$str_FINDOPT_USERS ! -user $str_USER_OR_GROUP"
		fi
		
		if [ `egrep -c "^$str_USER_OR_GROUP:" /etc/group` -ne 0 ]
		then
			str_FINDOPT_GROUPS="$str_FINDOPT_GROUPS ! -group $str_USER_OR_GROUP"
		fi
	done

	str_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fNisNisPlusYpOwn"
	find $str_SEARCH_DIRECTORIES $str_FINDOPT_PRUNE_EXPRESSION -o '(' -follow -type f '(' $str_FINDOPT_USERS ')' -print ')' >"$str_TAG_FILE_PATH" 2>>"$str_FIND_ERRORS_PATH" &
	append_pid_into_list_of_background_processes "$!"

	str_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fNisNisPlusYpGrpOwn"
	find $str_SEARCH_DIRECTORIES $str_FINDOPT_PRUNE_EXPRESSION -o '(' -follow -type f '(' $str_FINDOPT_GROUPS ')' -print ')' >"$str_TAG_FILE_PATH" 2>>"$str_FIND_ERRORS_PATH" &
	append_pid_into_list_of_background_processes "$!"

	str_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fNisNisPlusYpFilePerm"
	find $str_SEARCH_DIRECTORIES $str_FINDOPT_PRUNE_EXPRESSION -o '(' -follow -type f '(' $str_FINDOPT_PERM_GX -o $str_FINDOPT_PERM_WX ')' -print ')' >"$str_TAG_FILE_PATH" 2>>"$str_FIND_ERRORS_PATH" &
	append_pid_into_list_of_background_processes "$!"
}

# For DISA rule V-1048, V-1049, V-1061, V-22367
# fSndDevices list all the character devices present in /dev/audio and /dev/snd
search_for_audio_device_files ()
{
	str_SEARCH_DIRECTORIES='/dev/audio /dev/snd'

	str_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fSndDevices"
	find $str_SEARCH_DIRECTORIES $str_FINDOPT_PRUNE_EXPRESSION -o '(' -follow -type c -print ')' >"$str_TAG_FILE_PATH" 2>>"$str_FIND_ERRORS_PATH" &
	append_pid_into_list_of_background_processes "$!"
}

# fCronScripts lists all cron scripts mentioned below
search_for_cron_scripts ()
{
	str_SEARCH_DIRECTORIES='/etc/cron.d /etc/cron.daily /etc/cron.hourly /etc/cron.monthly /etc/cron.weekly'

	str_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fCronScripts"
	find $str_SEARCH_DIRECTORIES $str_FINDOPT_PRUNE_EXPRESSION -o '(' -follow -type f -print ')' >"$str_TAG_FILE_PATH" 2>>"$str_FIND_ERRORS_PATH" &
	append_pid_into_list_of_background_processes "$!"
}

# It provides the following tags:
# Corresponding to rules V-914 (fV914), V-915 (fV915), V-22351 (fV22351), V-904 (fUser-$str_USER-HomeFilesDirsOwn)
# V-22361 (fUser-$str_USER-HomeFilesDirsGrpOwn), fLocalInitializationFiles (Local Initialization files)
search_home_files_And_dir_for_user_and_group_ownership()
{
	str_LOCAL_FILES=".bashrc .bash_login .bash_logout .bash_profile .cshrc .dtprofile .dispatch .emacs .env .exrc .kshrc .login .logout .profile .tcshrc .dt"
	str_LOCAL_INI_FILES=`echo "$str_LOCAL_FILES" | sed -e 's/ / -o -name /g' -e 's/^/( -name /' -e 's/$/ )/'`
	str_NON_LOCAL_INI_FILES=`echo "$str_LOCAL_FILES" | sed -e 's/ / -a ! -name /g' -e 's/^/( ! -name /' -e 's/$/ )/'`
	
	getent passwd | egrep -v "/usr/bin/false|/bin/false|/dev/null|/sbin/nologin|/bin/nologin|/usr/bin/nologin|:$" | while read str_CURRENT_PASSWD_ENTRY
	do
		str_USER=`echo "$str_CURRENT_PASSWD_ENTRY" | cut -d: -f1 2>>"$str_FIND_ERRORS_PATH"`
		if [ -z "$str_USER" ]
		then
			echo "Error: Empty user name" >>"$str_FIND_ERRORS_PATH"
			continue
		fi
		
		str_HOME_DIR=`echo "$str_CURRENT_PASSWD_ENTRY" | cut -d: -f6 2>>"$str_FIND_ERRORS_PATH"`
		if [ -z "$str_HOME_DIR" -o ! -d "$str_HOME_DIR" ]
		then
			echo "Error: No home directory set or empty home directory for user $str_USER: $str_HOME_DIR" >>"$str_FIND_ERRORS_PATH"
			continue
		fi
		
		i_GID=`echo "$str_CURRENT_PASSWD_ENTRY" | cut -d: -f4 2>>"$str_FIND_ERRORS_PATH"`
		if [ -z "$i_GID" ]
		then
			echo "Error: No GID value set for user: $str_USER" >>"$str_FIND_ERRORS_PATH"
			continue
		fi
		
		i_GIDS=`id -G "$str_USER"`
		if [ -z "$i_GID" ]
		then
			echo "Error: id command didn't return data for user: $str_USER" >>"$str_FIND_ERRORS_PATH"
			continue
		fi
		str_FIND_GIDS=`echo "$i_GIDS" | sed -e 's/ / -a ! -gid /g'`
		str_FIND_GIDS="( ! -gid $str_FIND_GIDS )"
		
		str_UHO_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fUser-$str_USER-HomeFilesDirsOwn"
		str_UHG_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fUser-$str_USER-HomeFilesDirsGrpOwn"
		str_LIF_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fLIF-Temp-$str_USER"
		str_V914_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fV914-Temp-$str_USER"
		str_V915_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fV915-Temp-$str_USER"
		str_V22351_TAG_FILE_PATH="$str_STAGING_DIRECTORY/fV22351-Temp-$str_USER"
		
		rm -f "$str_UHO_TAG_FILE_PATH" "$str_UHG_TAG_FILE_PATH" "$str_LIF_TAG_FILE_PATH" "$str_V914_TAG_FILE_PATH" "$str_V915_TAG_FILE_PATH"
		find "$str_HOME_DIR" $str_FINDOPT_PRUNE_EXPRESSION -o \( \
		\( $str_LOCAL_INI_FILES \! -user "$str_USER" -exec sh -c "echo \"{}\" >>'$str_UHO_TAG_FILE_PATH'" \; \) , \
		\( $str_LOCAL_INI_FILES \( \! -gid 0 -a \! -group "$i_GID" \) -exec sh -c "echo \"{}\" >>'$str_UHG_TAG_FILE_PATH'" \; \) , \
		\( $str_LOCAL_INI_FILES -exec sh -c "echo \"{}\" >>'$str_LIF_TAG_FILE_PATH'" \; \) , \
		\( $str_NON_LOCAL_INI_FILES \! -user "$str_USER" -exec sh -c "echo \"{}\" >>'$str_V914_TAG_FILE_PATH'" \; \) , \
		\( $str_NON_LOCAL_INI_FILES \( $str_FINDOPT_PERM_WX -o $str_FINDOPT_PERM_WW -o $str_FINDOPT_PERM_WR -o $str_FINDOPT_PERM_GW -o $str_FINDOPT_PERM_SGID -o $str_FINDOPT_PERM_SUID \) -exec sh -c "echo \"{}\" >>'$str_V915_TAG_FILE_PATH'" \; \) , \
		\( $str_FIND_GIDS -exec sh -c "echo \"{}\" >>'$str_V22351_TAG_FILE_PATH'" \; \) \
		\) &
		append_pid_into_list_of_background_processes "$!"
	done
}

trap "handle_sigterm" $i_SIGTERM $i_SIGINT

initialise
parse_parameters "$@"
exit_if_we_need_not_update_cache_else_clear_old_cache
create_and_execute_find_timeout_script
process_directories_to_be_pruned
process_scan_directories_if_any_or_use_root

execute_find_for_root_or_scan_directories

# Custom find command calls
search_for_ww_and_gw_library_files
search_for_more_permissive_log_files
search_for_more_permissive_man_pages
search_for_rc_files
search_for_more_permissive_system_commands
search_for_yp_nis_files
search_for_audio_device_files
search_for_cron_scripts
search_home_files_And_dir_for_user_and_group_ownership

wait_for_find_processes_to_exit_and_do_post_processing
finalise
exit 0

